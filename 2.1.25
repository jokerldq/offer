/*
public class RandomListNode {
    int label;
    RandomListNode next = null;
    RandomListNode random = null;

    RandomListNode(int label) {
        this.label = label;
    }
}
*/
//复杂链表有两个指针，一个指向下一节点，一个指向随机节点。
public class Solution {
    public RandomListNode Clone(RandomListNode pHead)
    {
        CloneNodes(pHead);
        ConnectRandomNodes(pHead);
        return ReConnectNodes(pHead);
    }
    
    private void CloneNodes(RandomListNode pHead){
        RandomListNode node=pHead;
        while(node!=null){
            RandomListNode cloneNode =new RandomListNode(node.label);
            cloneNode.next=node.next;
            cloneNode.random=null;
            node.next=cloneNode;
            node=cloneNode.next;
        }
    }
    private void ConnectRandomNodes(RandomListNode pHead){
        RandomListNode node=pHead;
        while(node!=null){
            RandomListNode clone=node.next;
            if(node.random!=null){
                clone.random=node.random.next;
            }
            node=clone.next;
        }
    }
    private RandomListNode ReConnectNodes(RandomListNode pHead){
        RandomListNode node=pHead;
        RandomListNode cloneHead=null;
        RandomListNode cloneNode=null;
        if(node!=null){
            cloneHead=node.next;
            cloneNode=node.next;
            node.next=cloneNode.next;
            node=node.next;
        }
        while(node!=null){
            cloneNode.next=node.next;
            cloneNode=cloneNode.next;
            node.next=cloneNode.next;
            node=node.next;
        }
        return cloneHead;
    }
}
